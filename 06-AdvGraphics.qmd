# Продвинутая графика {#advgraphics}

## Предварительные требования {#advgraphics_prerequisites}

Для работы по теме текущей лекции вам понадобятся пакеты **ggplot2**, **dplyr** и **tidyr** из **tidyverse**. Помимо этого, мы будем работать напрямую с данными [**Евростата**](https://ec.europa.eu/eurostat/web/main/home), NASA [**POWER**](https://power.larc.nasa.gov/) и USDA NRCS [**Soil Data Access**](https://sdmdataaccess.nrcs.usda.gov/) к которым можно обращаться напрямую с использованием пакетов [`eurostat`](https://ropengov.github.io/eurostat/), [`nasapower`](https://docs.ropensci.org/nasapower/) и [`soildb`](http://ncss-tech.github.io/soilDB/docs/):

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(eurostat)
library(nasapower)
library(soilDB)
```

> Пакет soilDB лучше устанавливать из консоли командой `install.packages('soilDB', dependencies = TRUE)`. Указание параметра `dependencies = TRUE` обеспечит установку других пакетов, от которых он зависит.

В настоящей главе мы кратко познакомимся с системой [**ggplot2**](https://ggplot2.tidyverse.org/). **gg** расшифровывается как *grammar of graphics*. Под этим понимается определенная (какая --- мы узнаем далее) система правил, позволяющих описывать и строить графики. ggplot довольно сильно отличается от стандартной графической подсистемы R. Прежде всего --- модульным подходом к построению изображений. В ggplot вы собираете графики «по кирпичикам», отдельно определяя источник данных, способы изображения, параметры системы координат и т.д. -- путем вызова и *сложения* результатов соответствующих функций.

При построении элементарных графиков **ggplot** может показаться (и по факту так и есть) сложнее, чем стандартная графическая подсистема. Однако при усложнении требований к внешнему виду и информационному насыщению графика сложность ggplot оказывается преимуществом, и с ее помощью *относительно просто* можно получать элегантные и информативные визуализации, на создание которых с помощью стандартной подсистемы пришлось бы затратить невероятные усилия! В этой главе мы кратко познакомимся с ggplot, а далее на протяжении курса будем регулярно ее использовать, осваивая новые возможности.

## Загрузка данных Евростата {#advgraphics_eurostat}

Таблицы данных Евростата имеют уникальные коды, по которым их можно загружать, используя API (Application programming interface). В этой лекции мы будем работать с данными о крупнейших международных партнерах Евросоюза по импорту и экспорту основных видов товаров. Например, [таблица данных по продуктам питания, напиткам и табаку](https://ec.europa.eu/eurostat/databrowser/view/EXT_LT_MAINAGRI/default/table?lang=en) имеет код **EXT_LT_MAINAGRI**:

```{r, echo = FALSE}
knitr::include_graphics('images/eurostat.png')
```

Для чтения таблиц по кодам в пакете eurostat имеется функция `get_eurostat()`. Чтобы год измерения получить в виде числа, а не объекта типа `Date`, используем второй параметр `time_format = num`. Для перехода от кодов продукции и стран к их полным наименованиям, дополнительно вызовем функцию `label_eurostat()` из того же пакета:

```{r, cache = TRUE}
tables = c('ext_lt_mainagri', 'ext_lt_mainrawm', 'ext_lt_mainmine',
           'ext_lt_mainchem','ext_lt_mainmanu', 'ext_lt_mainmach')

countries = ISOcodes::ISO_3166_1$Alpha_2

trades = lapply(tables, function(X) { # прочтем несколько таблиц в список
  get_eurostat(X) |> filter(partner %in% countries) |> label_eurostat()
}) |> 
  bind_rows() |> # объединим прочитанные таблицы в одну
  select(-geo) |> # убираем столбец с территорией торговли, т.к. там только Евросоюз
  filter(stringr::str_detect(indic_et, 'Exports in|Imports in')) |> # оставим только экспорт и импорт
  pivot_wider(names_from = indic_et, values_from = values) |>  # вынесем данные по экспорту и импорту в отдельные переменные
  rename(export = `Exports in million of ECU/EURO`, # дадим им краткие названия
         import = `Imports in million of ECU/EURO`) |> 
  mutate(partner = as.factor(partner))

trades # посмотрим, что получилось
```

## Загрузка данных NASA POWER {#advgraphics_nasapower}

NASA [**POWER**](https://power.larc.nasa.gov/) --- это проект *NASA*, предоставляющий метеорологические, климатические и энергетические данные для целей исследования возобновляемых источников энергии, энергетической эффективности зданий и сельскохозяйственных приложений. Доступ к этим данным, как и Евростату, можно получить через программный интерфейса (API), используя пакет [**nasapower**](https://docs.ropensci.org/nasapower/).

В основе выгрузки данных лежат реанализы с разрешением $0.5^\circ$ Выгрузим данные по температуре, относительной влажности и осадкам в Екатеринбурге ($60.59~в.д.$, $56.84~с.ш.$) за период с 1 по 30 апреля 1995 года:

```{r, cache = TRUE, eval=FALSE}
daily_single_ag <- get_power(
  community = "ag",
  lonlat = c(60.59, 56.84),
  pars = c("RH2M", "T2M"),
  dates = c("1995-04-01", "1995-04-30"),
  temporal_api = "daily"
)

daily_single_ag # посмотрим, что получилось
```

Аналогичным путем можно выгрузить данные, осредненные по годам. Например, можно получить данные по суммарной и прямой солнечной радиации ($кВт/ч/м^2/день$) для той же точки с 1995 по 2015 год:

```{r, cache = TRUE, eval=FALSE}
interannual_sse <- get_power(
  community = "ag",
  lonlat = c(60.59, 56.84),
  dates = 1995:2015,
  temporal_api = "climatology",
  pars = c("CLRSKY_SFC_SW_DWN",
           "ALLSKY_SFC_SW_DWN")
)
interannual_sse # посмотрим, что получилось
```

## Загрузка данных Soil Data Access {#advgraphics_soildb}

**Soil Data Access** --- это онлайн-сервис департамента сельского хозяйства США, который позволяет получать подробные данные о почвенных ресурсах этой страны. Наиболее часто запрашиваются данные по так называемым почвенным [*сериям*](https://en.wikipedia.org/wiki/Soil_series) --- группам почвенных профилей, обладающих схожими характеристиками и, таким образом, идентичными с точки зрения сельскохозяйственного использования. Как правило, серии именуются по названию населенного пункта, рядом с которым впервые были найдены подобные почвы.

Например, серия *Cecil* имеет следующее покрытие и обеспеченность разрезами в базе данных SDA при запросе на сайте [Series Extent Explorer](https://casoilresource.lawr.ucdavis.edu/see/#cecil):

```{r, echo = FALSE}
knitr::include_graphics('images/cecil.png')
```

Для запросов данных по почвенным сериям достаточно вызвать функцию `fetchOSD` и передать ей имя одной или более серий:

```{r, cache = TRUE}
soils = c('wilkes',  'chewacla', 'congaree')
series = fetchOSD(soils, extended = TRUE)
```

Результирющий объект представляет собой список со множеством таблиц, которые характеризуют как почвенную серию в целом, так и отдельные ее разрезы:

```{r}
str(series)
```

## Базовый шаблон ggplot {#advgraphics_template}

Для начала посмотрим, как можно показать суммарный экспорт по годам:

```{r}
trades_total = trades |> 
  group_by(time) |> 
  summarise(export = sum(export),
            import = sum(import))
  
ggplot(data = trades_total) +
  geom_point(mapping = aes(x = time, y = export))
```

Базовый (минимально необходимый) шаблон построения графика через **ggplot** выглядит следующим образом:

```{r, eval = FALSE}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

где:

-   `DATA` --- источник данных (фрейм, тиббл)
-   `GEOM_FUNCTION` --- функция, отвечающая за геометрический тип графика (точки, линии, гистограммы и т.д.)
-   `MAPPINGS` --- перечень соответствий между переменными данных (содержащихся в `DATA`) и графическими переменными (координатами, размерами, цветами и т.д.)

## Геометрические типы и преобразования {#advgraphics_geoms}

ggplot предлагает несколько десятков различных видов геометрий для отображения данных. С их полным перечнем можно познакомиться [тут](https://ggplot2.tidyverse.org/reference/). Мы рассмотрим несколько наиболее употребительных, а геометрии, связанные со статистическими преобразованиями, оставим для следующей темы.

В первом примере мы отображали данные по экспорту за разные года, однако точечный тип не очень подходит для данного типа графика, поскольку он показывает динамику изменения. А это означает, что желательно соединить точки линиями. Для этого используем геометрию `geom_line()`:

```{r}
ggplot(data = trades_total) +
  geom_line(mapping = aes(x = time, y = export))
```

Поскольку в данном случае величина является агрегированной за год, более правильным может быть показ ее изменений в виде ступенчатого линейного графика, который получается через геометрию `geom_step()`:

```{r}
ggplot(data = trades_total) +
  geom_step(mapping = aes(x = time, y = export))
```

Можно совместить несколько геометрий, добавив их последовательно на график:

```{r}
ggplot(data = trades_total) +
  geom_line(mapping = aes(x = time, y = export)) +
  geom_point(mapping = aes(x = time, y = export))
```

Если у нескольких геометрий одинаковые отображения, их можно вынести в вызов функции `ggplot()` (чтобы не дублировать):

```{r}
ggplot(data = trades_total, mapping = aes(x = time, y = export)) +
  geom_line() +
  geom_point()
```

Наглядность линейного графика можно усилить, добавив "заливку" области с использованием `geom_area()`:

```{r}
ggplot(data = trades_total, mapping = aes(x = time, y = export)) +
  geom_area(alpha = 0.5) + # полигон с прозрачностью 0,5
  geom_line() +
  geom_point()
```

Для построения столбчатой диаграммы следует использовать геометрию `geom_col()`. Например, вот так выглядит структура экспорта продукции машиностроения из Евросоюза по ведущим партнерам:

```{r}
trades |> 
  filter(sitc06 == 'Machinery and transport equipment', 
         export > 10000,
         time == as.Date('2022-01-01')) |> 
  ggplot(mapping = aes(x = partner, y = export)) +
  geom_col()
```

Развернуть диаграмму можно, используя функцию `coord_flip()`:

```{r}
trades |> 
  filter(sitc06 == 'Machinery and transport equipment', 
         export > 10000,
         time == as.Date('2022-01-01')) |> 
  ggplot(mapping = aes(x = partner, y = export)) +
  geom_col() +
  coord_flip()
```

## Графические переменные и группировки {#advgraphics_aes}

Графические переменные --- это параметры, определяющие внешний вид символов. К ним относятся цвет (тон, насыщенность и светлота), размер, форма, ориентировка, внутренняя структура символа. В ggplot значения графических переменных могут быть едиными для всех измерений, а могут зависеть от величины измерений. С точки зрения управления здесь все просто: если вы хотите, чтобы какой-то графический параметр зависел от значения показателя, он должен быть указан внутри конструкции `mapping = aes(...)`. Если необходимо, чтобы этот параметр был одинаковым для всех измерений, вы должны его указать внутри `<GEOM_FUNCTION>(...)`, то есть не передавать в `mapping`.

Для управления цветом, формой и размером (толщиной) графического примитива следует использовать параметры *color*, *shape* и *size* соответственно. Посмотрим, как они работают внутри и за пределами функции `aes()`:

```{r}
# один цвет для графика (параметр за пределами aes)
ggplot(trades_total) + 
    geom_line(mapping = aes(x = time, y = export), color = 'blue')

trade_russia = trades |> filter(partner == 'Russia')

ggplot(trade_russia) + # у каждой группы данных свой цвет (параметр внутри aes)
  geom_line(mapping = aes(x = time, y = export, color = sitc06))

ggplot(trade_russia, 
       mapping = aes(x = time, y = export, color = sitc06)) + # а теперь и с точками
  geom_line() +
  geom_point()
```

Аналогичным образом работает параметр формы значка:

```{r}
# один значок для графика
ggplot(trades_total) + 
    geom_point(mapping = aes(x = time, y = export), shape = 15)
    

ggplot(trade_russia) + # у каждой группы данных свой значок
    geom_point(mapping = aes(x = time, y = export, shape = sitc06))
```

Для изменения размера значка или линии используйте параметр `size`:

```{r}
# изменение размера значка и линии
ggplot(trades_total, mapping = aes(x = time, y = export)) + 
    geom_point(size = 5) +
    geom_line(size = 2)
```

Если вы используете зависимые от значений графические переменные и при этом хотите добавить на график еще одну геометрию (c постоянными параметрами), то вам необходимо сгруппировать объекты второй геометрии по той же переменной, по которой вы осуществляете разбиение в первой геометрии. Для этого используйте параметр `group`:

```{r}
ggplot(trade_russia, aes(x = time, y = export)) + 
    geom_point(aes(shape = sitc06)) +
    geom_line(aes(group = sitc06))
```

Для изменения цвета столбчатых диаграмм следует использовать параметр `fill`, а цвет и толщина обводки определяются параметрами `color` и `size`:

```{r}
trades |> 
  filter(sitc06 == 'Machinery and transport equipment', 
         export > 10000,
         time == as.Date('2017-01-01')) |> 
  ggplot(mapping = aes(x = partner, y = export)) +
  geom_col(fill = 'plum4', color = 'black', linewidth = 0.2) +
  coord_flip()
```

Цвет на столбчатых диаграммах можно использовать для отображения дополнительных переменных, например типа экспортируемой продукции. По умолчанию столбики будут образовывать стек

```{r}
trades |> 
  filter(time == as.Date('2022-01-01')) |> 
  group_by(partner) |> 
  filter(sum(export) > 30000) |> 
  ggplot(mapping = aes(x = partner, y = export, fill = sitc06)) +
  geom_col(color = 'black', size = 0.2) +
  coord_flip()
```

Если вам важно не абсолютное количество, а процентное соотношение величин, вы можете применить вид группировки `position == 'fill`:

```{r}
trades |> 
  filter(time == as.Date('2022-01-01')) |> 
  group_by(partner) |> 
  filter(sum(export) > 30000) |> 
  ggplot(mapping = aes(x = partner, y = export, fill = sitc06)) +
    geom_col(color = 'black', size = 0.2, position = 'fill') +
    coord_flip()
```

Еще один вид группировки --- это группировка по соседству. Чтобы использовать ее, применить метод `position == 'dodge`:

```{r}
trade_russia |> 
  filter(time >= as.Date('2013-01-01')) |> 
  ggplot(mapping = aes(x = time, y = export, fill = sitc06)) +
    geom_col(color = 'black', size = 0.2, position = 'dodge')
```

## Системы координат {#advgraphics_coords}

**ggplot** поддерживает множество полезных преобразований координат, таких как смена осей X и Y, переход к логарифмическим координатам и использование полярной системы вместо декартовой прямоугольной.

Смена переменных происходит благодаря уже знакомой нам функции `coord_flip()`. Рассмотрим, например, как изменилась структура экспорта/импорта по годам:

```{r}
trades_type = trades |> 
  group_by(sitc06, time) |> 
  summarise(export = sum(export),
            import = sum(import))

ggplot(trades_type) + 
    geom_point(mapping = aes(x = export, y = import, color = sitc06, size = time), alpha = 0.5)

ggplot(trades_type) + 
    geom_point(mapping = aes(x = export, y = import, color = sitc06, size = time), alpha = 0.5) +
    coord_flip()
```

Поскольку объемы продукции различаются *на порядки*, для различимости малых объемов целесообразно перейти к логарифмической шкале. Для этого используем `scale_log_x()` и `scale_log_y()`:

```{r}
ggplot(trades_type, mapping = aes(x = export, y = import, color = sitc06, size = time)) + 
  geom_point(alpha = 0.5) +
  scale_x_log10() +
  scale_y_log10()
```

Преобразование в полярную систему координат используется для того чтобы получить круговую секторную диаграмму Найтингейл (*coxcomb chart*):

```{r}
trades |> 
  filter(sitc06 == 'Machinery and transport equipment', 
         export > 10000,
         time == as.Date('2022-01-01')) |> 
  ggplot(mapping = aes(x = partner, y = export, fill = partner)) +
  geom_col() +
  coord_polar()
```

Разумеется, здесь тоже можно использовать преобразование шкалы по оси *Y* (которая теперь отвечает за радиус). Применим правило квадратного корня, добавив вызов функции `scale_y_sqrt()`:

```{r}
trades |> 
  filter(sitc06 == 'Machinery and transport equipment', 
         export > 10000,
         time == as.Date('2017-01-01')) |> 
  ggplot(mapping = aes(x = partner, y = export, fill = partner)) +
  geom_col() +
  coord_polar() +
  scale_y_sqrt()
```

Чтобы построить классическую секторную диаграмму, необходимо, чтобы угол поворота соответствовал величине показателя (оси *Y*), а не названию категории (оси *X*). Для этого при вызове функции `coord_polar()` следует указать параметр `theta = 'y'`, а при вызове `geom_col()` оставить параметр `x` пустым:

```{r}
trades |> 
  filter(sitc06 == 'Machinery and transport equipment',
         export > 10000,
         time == as.Date('2017-01-01')) |> 
  ggplot(mapping = aes(x = '', y = export, fill = partner), 
         color = 'black', linewidth = 0.5) +
    geom_col() +
    coord_polar(theta = 'y')
```

## Названия осей и легенды {#advgraphics_titles}

ggplot предоставляет ряд функций для аннотирования осей и легенды. Для этого можно использовать одну из следующих функций:

-   `labs(...)` модифицирует заголовок легенды для соответствующей графической переменной, либо заголовок/подзаголовок графика
-   `xlab(label)` модифицирует подпись оси X
-   `ylab(label)` модифицирует подпись оси Y
-   `ggtitle(label, subtitle = NULL)` модифицирует заголовок и подзаголовок графика

Создадим подписи легенд, отвечающих за цвет и размер значка на графике соотношения импорта и экспорта разных видов продукции:

```{r}
ggplot(trades_type) + 
  geom_point(mapping = aes(x = export, y = import, color = sitc06, size = time), alpha = 0.5) +
  labs(color = "Вид продукции", size = 'Год')
```

Добавим заголовок и подзаголовок графика:

```{r}
ggplot(trades_type) + 
  geom_point(mapping = aes(x = export, y = import, color = sitc06, size = time), alpha = 0.5) +
  labs(color = "Вид продукции", size = 'Год') +
  ggtitle('Соотношение импорта и экспорта в странах Евросоюза (млн долл. США)',
          subtitle = 'Данные по ключевым партнерам')
```

Изменим подписи осей:

```{r}
ggplot(trades_type) + 
  geom_point(mapping = aes(x = export, y = import, color = sitc06, size = time), alpha = 0.5) +
  labs(color = "Вид продукции", size = 'Год') +
  ggtitle('Соотношение импорта и экспорта в странах Евросоюза (млн долл. США)',
          subtitle = 'Данные по ключевым партнерам') +
  xlab('Экспорт') +
  ylab('Импорт')
```

## Разметка осей {#advgraphics_axes}

Первое, что вам скорее всего захочется убрать --- это экспоненциальная запись чисел. На самом деле, эта запись не является параметром **ggplot** или стандартной системы **graphics**. Количество значащих цифр, после которых число автоматически представляется в экспоненциальном виде, управляется параметром `scipen`. Мы можем задать его достаточно большим, чтобы запретить переводить любые разумные числа в экспоненциальный вид:

```{r}
options(scipen = 999)
ggplot(trades_type) + 
  geom_point(mapping = aes(x = export, y = import, color = sitc06, size = time), alpha = 0.5) +
  labs(color = "Вид продукции", size = 'Год') +
  ggtitle('Соотношение импорта и экспорта в странах Евросоюза (млн долл. США)',
          subtitle = 'Данные по ключевым партнерам') +
  xlab('Экспорт') +
  ylab('Импорт')
```

Для управления разметкой осей необходимо использовать функции `scale_x_continuous()`, `scale_y_continuous()`, `scale_x_log10(...)`, `scale_y_log10(...)`, `scale_x_reverse(...)`, `scale_y_reverse(...)`, `scale_x_sqrt(...)`, `scale_y_sqrt(...)`, которые, с одной стороны, указывают тип оси, а с другой стороны --- позволяют управлять параметрами сетки координат и подписями.

Для изменения координат линий сетки и подписей необходимо использовать, соответственно, параметры `breaks` и `labels`:

```{r}
ggplot(trades_type, mapping = aes(x = export, y = import, color = sitc06, size = time)) + 
  geom_point(alpha = 0.5) +
  scale_x_log10(breaks = seq(0, 500000, 100000)) +
  scale_y_log10(breaks = seq(0, 500000, 100000))
```

В данном случае, как раз, будет достаточно полезным параметр `labels`, поскольку метки можно сделать более компактными, поделив их на 1000 (и не забыть потом указать, что объемы теперь указаны не в миллионах, а в миллиардах долларов):

```{r}
brks = seq(0, 500000, 100000)
ggplot(trades_type, mapping = aes(x = export, y = import, color = sitc06, size = time)) + 
  geom_point(alpha = 0.5) +
  scale_x_log10(breaks = brks, labels = brks / 1000) +
  scale_y_log10(breaks = brks, labels = brks / 1000)
```

Для обычной шкалы используйте функции `scale_x_continuous()` и `scale_y_continuous()`:

```{r}
ggplot(trades_type, mapping = aes(x = export, y = import, color = sitc06, size = time)) + 
  geom_point(alpha = 0.5) +
  scale_x_continuous(breaks = brks, labels = brks / 1000) +
  scale_y_continuous(breaks = brks, labels = brks / 1000)
```

Для того чтобы принудительно указать диапазоны осей и графических переменных, следует использовать функции `lims(...)`, `xlim(...)` и `ylim(...)`. Например, мы можем приблизиться в левый нижний угол графика, задав диапазон 0-200000 по обеим осям:

```{r}
ggplot(trades_type, mapping = aes(x = export, y = import, color = sitc06, size = time)) + 
  geom_point(alpha = 0.5) +
  xlim(0, 50000) +
  ylim(0, 100000)
```

Функция `lims()` работает еще хитрее: она позволяет применять графические переменные только к ограниченному набору значений исходных данных. Например, таким путем я могу выделить на графике продукцию машиностроения:

```{r}
ggplot(trades_type, mapping = aes(x = export, y = import, color = sitc06, size = time)) + 
  geom_point(alpha = 0.5) +
  lims(color = 'Machinery and transport equipment')
```

## Подписи и аннотации {#advgraphics_labels}

С точки зрения **ggplot** текст на графике, отображающий входные данные, является одной из разновидностей геометрии. Размещается он с помощью функции `geom_text()`. Как и в случае с другими геометриями, параметры, зависящие от исходных данных, должны быть переданы внутри `mapping = aes(...)`:

```{r}
ggplot(data = trades_total, mapping = aes(x = time, y = export)) +
  geom_area(alpha = 0.5) + # полигон с прозрачностью 0,5
  geom_line() +
  geom_point() +
  geom_text(aes(label = floor(export / 1000))) # добавляем подписи
```

Выравнивание подписи относительно якорной точки (снизу, сверху, справа, слева) по горизонтали и вертикали управляется параметрами `hjust` и `vjust`, а смещения по осям X (в координатах графика) --- параметрами `nudge_x` и `nudge_y`:

```{r}
ggplot(data = trades_total, mapping = aes(x = time, y = export)) +
  geom_area(alpha = 0.5) + # полигон с прозрачностью 0,5
  geom_line() +
  geom_point() +
  geom_text(aes(label = floor(export / 1000)), 
            vjust = 0, nudge_y = 40000) # добавляем подписи
```

Подписи с фоновой плашкой добавляются через функцию `geom_label()`, которая имеет аналогичный синтаксис:

```{r}
trades |> 
  filter(sitc06 == 'Machinery and transport equipment', 
         export > 10000,
         time == as.Date('2022-01-01')) |> 
  ggplot(mapping = aes(x = partner, y = export)) +
  geom_col(fill = 'plum4', color = 'black', size = 0.2) +
  coord_flip() +
  geom_label(aes(y = export / 2, label = floor(export / 1000))) # добавляем подписи
```

**Аннотации** представляют собой объекты, размещаемые на графике вручную, и используемые, как правило, для выделения объектов и областей. Для размещения аннотаций используется функция `annotate()`:

```{r}
ggplot(data = trades_total, mapping = aes(x = time, y = export)) +
  geom_area(alpha = 0.5) + # полигон с прозрачностью 0,5
  geom_line() +
  geom_point() +
  geom_text(aes(label = floor(export / 1000)), 
            vjust = 0, nudge_y = 40000) +
  annotate("text", x = as.Date('2009-01-01'), y = 550000, 
           label = "Это провал", color = 'red')
```

Аннотировать можно не только подписями, но и регионами. Например, мы можем выделить область, которая соответствует импорту/экспорту продукции химической промышленности:

```{r}
ggplot(trades_type, mapping = aes(x = export, y = import, color = sitc06, size = time)) + 
  annotate("rect", xmin = 100000, xmax = 470000, ymin = 50000, ymax = 300000,  alpha = .2, color = 'black', size = 0.1) +
  geom_point(alpha = 0.5) +
  annotate("text", x = 175000, y = 200000, label = "Chemicals", color = 'coral', size = 6)
```

## Фасеты {#advgraphics_facets}

Фасеты представляют собой множество графиков, каждый из которых отображает свою переменную или набор значений. Для разбиения на фасеты используется функция facet_wrap(), которой необходимо передать переменную разбиения с *тильдой*. Например, рассмотрим изменение структуры импорта по годам:

```{r}
brks = c(0, 50, 100, 150, 200)
trades |> 
  filter(sitc06 == 'Machinery and transport equipment',
         import > 20000) |> 
  ggplot(mapping = aes(x = partner, y = import)) +
  geom_col() +
  scale_y_continuous(breaks = brks * 1e3, labels = brks) +
  ggtitle('Импорт продукции машиностроения (мдрд долл. США)',
        subtitle = 'Данные по ключевым партнерам') +
  coord_flip() +
  facet_wrap(~time)
```

## Темы {#advgraphics_themes}

Система **ggplot** интересна также тем, что для нее существует множество предопределенных "тем" или скинов для оформления графиков. [Часть из них](https://ggplot2.tidyverse.org/reference/ggtheme.html) входит в состав самой библиотеки. Дополнительные темы можно установить через пакет [**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/index.html). Чтобы изменить тему оформления ggplot, достаточно прибавить в конце построения графика соответствующую функцию. Например, классическая черно-белая тема получается прибавлением функции `theme_bw()`:

```{r}
ggplot(data = trades_total, mapping = aes(x = time, y = export)) +
  geom_area(alpha = 0.5) + # полигон с прозрачностью 0,5
  geom_line() +
  geom_point() +
  geom_text(aes(label = floor(export / 1000)), 
            vjust = 0, nudge_y = 40000) +
  theme_bw()

ggplot(trades_type) + 
  geom_point(mapping = aes(x = export, y = import, color = sitc06, size = time), alpha = 0.5) +
  labs(color = "Вид продукции", size = 'Год') +
  ggtitle('Соотношение импорта и экспорта в странах Евросоюза (млн долл. США)',
          subtitle = 'Данные по ключевым партнерам') +
  xlab('Экспорт') +
  ylab('Импорт') +
  theme_bw()
```

## Краткий обзор {#advgraphics_review}

Для просмотра презентации щелкните на ней один раз левой кнопкой мыши и листайте, используя кнопки на клавиатуре:

```{r, echo=FALSE}
knitr::include_url('https://tsamsonov.github.io/r-geo-course-slides/06_AdvGraphics.html#1', height = '390px')
```

> Презентацию можно открыть в отдельном окне или вкладке браузере. Для этого щелкните по ней правой кнопкой мыши и выберите соответствующую команду.

## Контрольные вопросы и упражнения {#questions_tasks_advgraphics}

### Вопросы {#questions_advgraphics}

1.  Назовите три основных компоненты шаблона построения графика в **ggplot2**.
2.  Как называются геометрии **ggplot2**, отвечающие за построение точек, линий и ступенчатых линий?
3.  Как называется геометрия **ggplot2**, отвечающая за построение столбчатой диаграммы?
4.  Как сделать так, чтобы графический параметр **ggplot2** был постоянным для всех измерений?
5.  Как сделать так, чтобы графический параметр **ggplot2** зависел от значения переменной?
6.  Перечислите названия параметров, отвечающих за цвет, размер, заливку и тип значка графического примитива.
7.  Если вы используете зависимые от значений графические переменные и при этом хотите добавить на график еще одну геометрию с постоянными параметрами, то как это можно реализовать?
8.  Перечислите названия режимов группировки столбчатых диаграмм и пути их реализации.
9.  Какая функция ggplot2 позволяет поменять местами оси координат?
10. Перечислите типы шкал для осей координат, которые доступны в **ggplot2**.
11. Назовите функцию, позволяющую перейти к полярной системе координат при построении графика в **ggplot2**.
12. В чем отличие построения розы-диаграммы (*coxcomb chart*) и секторной диаграммы (*pie chart*) средствами **ggplot2**?
13. Что делает функция `labs()`?
14. Какие функции позволяют определить названия осей и заголовок графика?
15. Что делает функция `lims()`?
16. Как ограничить область построения графика заданным диапазоном значений координат?
17. Как ограничить применение графических переменных только к определенным значениям измерений?
18. Назовите геометрии, которые позволяют размещать подписи и подписи с плашками (фоном) на графиках **ggplot2**.
19. Чем отличаются аннотации от геометрии подписей в **ggplot**? Какие виды аннотаций можно создавать?
20. Каким образом можно построить фасетный график, на котором каждое изображение соответствует значению переменной? Каков синтаксис вызова соответствующей функции?
21. Как поменять стиль отображения (тему) графика **ggplot2**?
22. Как получить программный доступ к таблицам Евростата, не прибегая к закачке файлов? Какой пакет можно использовать для этого?
23. Что является уникальным идентификатором таблицы в данных Евростата и как его узнать?
24. Как преобразовать коды Евростата в загруженных таблицах в человеко-читаемые обозначения?

### Упражнения {#tasks_advgraphics}

> Упражнения данной главы частично повторяют упражнения предыдущей главы по базовой графике в целях сравнения двух графических систем R.

1.  Постройте для набора данных *quakes* пакета **datasets** гистограммы распределения глубин и магнитуд, а также диаграмму рассеяния для двух этих характеристик. Используйте сначала функцию `qplot()`, а затем выполните то же самое с использованием полного синтаксиса `ggplot2()`.

2.  На портале открытых данных Тульской области есть [**данные**](https://opendata71.ru/opendata/7107096442-stateforestregisterTularegion/table) о распределении площади лесов и запасов древесины по преобладающим породам и группам возраста. Скачайте эти данные в виде таблицы CSV и постройте по ним круговую и столбчатую диаграмму для категории `Площадь земель, занятых лесными насаждениями (покрытых лесной растительностью), всего`. Подберите цвета, попробуйте изменить ориентировку столбцов на горизонтальную, а для круговой диаграммы поменять угол поворота.

3.  Используя [данные](https://raw.githubusercontent.com/tsamsonov/r-geo-course/master/data/garabashi.xlsx)[^06-advgraphics-1] по балансу масс ледника Гарабаши, постройте график с тремя кривыми (аккумуляции, абляции и *кумулятивного* баланса) за период 1981 по 2017 г. Добавьте на график легенду. Обратите внимание на то, что таблица содержит агрегирующие строки (1982-1997, 1998-2017, 1982-2017), которые вам необходимо предварительно исключить.

    > **Подсказка:** Чтобы построить кривую кумулятивного баланса, используйте функцию `cumsum`.

4.  Загрузите [таблицу данных по импорту/экспорту продуктов питания, напитков и табака](https://ec.europa.eu/eurostat/databrowser/view/tet00034/default/table?lang=en) с портала Евростата (с использованием пакета **eurostat**). Постройте линейный график изменения *суммарных* величин импорта и экспорта по данному показателю (у вас должно получиться 2 графика на одном изображении). Используйте *цвет* для разделения графиков. Добавьте текстовые подписи величин импорта и экспорта. Постройте также две круговых диаграммы, показывающих соотношение ведущих импортеров и экспортеров за последний имеющийся год. Сделайте сначала это отдельными графиками, а затем одним фасетным графиком (для этого потребуется привести таблицу к длинной форме).

5.  Постройте линейный график хода температуры , а также столбчатую диаграмму хода суммарной солнечной радиации в Екатеринбурге на примере данных NASA POWER, загруженных в разделе [6.3](#advgraphics_nasapower).<!-- \@ref(advgraphics_nasapower). -->

    > **Подсказка**: Для построения столбчатой диаграммы вам потребуется использовать функцию `geom_col()`, поскольку высота столбика отражает не встречаемость значения, а величину переменной. Также вам потребуется преобразовать таблицу среднемесячных величин к длинной форме, где название месяца будет отдельной переменной (тип --- упорядоченный фактор).

[^06-advgraphics-1]: *Рототаева О.В., Носенко Г.А., Керимов А.М., Кутузов С.С., Лаврентьев И.И., Никитин С.А., Керимов А.А., Тарасова Л.Н.* Изменения баланса массы ледника Гарабаши (Эльбрус) на рубеже XX--XXI вв. **Лёд и Снег**. 2019;59(1):5-22. https://doi.org/10.15356/2076-6734-2019-1-5-22

|                                                                                                                                                                                                                    |
|------------------------------------------------------------------------|
| *Самсонов Т.Е.* **Визуализация и анализ географических данных на языке R.** М.: Географический факультет МГУ, `r lubridate::year(Sys.Date())`. DOI: [10.5281/zenodo.901911](https://doi.org/10.5281/zenodo.901911) |
